"use strict";
/**
 * Orbitport SDK - Official TypeScript SDK for SpaceComputer Orbitport
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrbitportSDK = exports.BeaconService = exports.CTRNGService = exports.AuthService = void 0;
exports.createOrbitportSDK = createOrbitportSDK;
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./types"), exports);
tslib_1.__exportStar(require("./storage"), exports);
tslib_1.__exportStar(require("./utils/errors"), exports);
tslib_1.__exportStar(require("./utils/retry"), exports);
tslib_1.__exportStar(require("./utils/validation"), exports);
var auth_1 = require("./services/auth");
Object.defineProperty(exports, "AuthService", { enumerable: true, get: function () { return auth_1.AuthService; } });
var ctrng_1 = require("./services/ctrng");
Object.defineProperty(exports, "CTRNGService", { enumerable: true, get: function () { return ctrng_1.CTRNGService; } });
var ipfs_1 = require("./services/ipfs");
Object.defineProperty(exports, "BeaconService", { enumerable: true, get: function () { return ipfs_1.BeaconService; } });
const auth_2 = require("./services/auth");
const ctrng_2 = require("./services/ctrng");
const beacon_1 = require("./services/beacon");
const storage_1 = require("./storage");
const validation_1 = require("./utils/validation");
/**
 * Main Orbitport SDK class
 *
 * @example
 * ```typescript
 * import { OrbitportSDK } from '@spacecomputer/orbitport-sdk';
 *
 * // With API credentials (tries API first, falls back to IPFS)
 * const sdk = new OrbitportSDK({
 *   config: {
 *     clientId: 'your-client-id',
 *     clientSecret: 'your-client-secret'
 *   }
 * });
 *
 * // Without API credentials (uses IPFS only)
 * const sdk = new OrbitportSDK({
 *   config: {}
 * });
 *
 * // Generate random data (always reads from both IPFS sources and compares)
 * const result = await sdk.ctrng.random();
 * console.log(result.data);
 * ```
 */
class OrbitportSDK {
    /**
     * Creates a new Orbitport SDK instance
     *
     * @param options - SDK initialization options
     */
    constructor(options) {
        // Validate and sanitize configuration
        this.config = (0, validation_1.sanitizeConfig)(options.config);
        this.debug = options.debug || false;
        // Create storage instance
        const storage = options.storage || (0, storage_1.createDefaultStorage)();
        // Initialize services
        this.authService = new auth_2.AuthService(this.config, storage, options.eventHandler, this.debug);
        this.beaconService = new beacon_1.BeaconService(this.config.ipfs || {}, this.debug);
        this.ctrngService = new ctrng_2.CTRNGService(this.config, () => this.authService.getValidToken(), this.beaconService, this.debug);
        if (this.debug) {
            console.log("[OrbitportSDK] Initialized with config:", {
                ...this.config,
                clientId: "[REDACTED]",
                clientSecret: "[REDACTED]",
            });
        }
    }
    /**
     * cTRNG (cosmic True Random Number Generator) service
     *
     * @example
     * ```typescript
     * // Generate random data (API first if credentials provided, then IPFS fallback)
     * const result = await sdk.ctrng.random();
     *
     * // Generate random data with specific API source
     * const result = await sdk.ctrng.random({ src: 'rng' });
     *
     * // Generate random data from IPFS beacon only
     * const result = await sdk.ctrng.random({ src: 'ipfs' });
     *
     * // Generate random data from specific IPFS beacon
     * const result = await sdk.ctrng.random({
     *   src: 'ipfs',
     *   beaconPath: '/ipns/your-beacon-cid'
     * });
     *
     * // Generate random data from specific cTRNG value in beacon array
     * const result = await sdk.ctrng.random({
     *   src: 'ipfs',
     *   index: 2 // Select the 3rd value (0-based)
     * });
     *
     * // Generate random data from specific block with specific index
     * const result = await sdk.ctrng.random({
     *   src: 'ipfs',
     *   block: 10012, // Traverse to block 10012
     *   index: 1 // Select the 2nd value from that block
     * });
     * ```
     */
    get ctrng() {
        return {
            /**
             * Generates true random numbers using cosmic sources
             *
             * Behavior:
             * - If API credentials provided: tries API first, falls back to IPFS
             * - If no API credentials: uses IPFS only
             * - IPFS always reads from both gateway and API sources and compares them
             * - Returns the selected cTRNG value from the beacon array (default: first value)
             *
             * @param request - Request parameters
             *   - src: "trng", "rng", or "ipfs" (source selection)
             *   - For IPFS requests (src: "ipfs"):
             *     - beaconPath: Custom IPFS beacon path
             *     - block: Block number to traverse to ("INF" for latest, default)
             *     - index: Index of cTRNG value to select from beacon array (0-based, uses modulo if out of bounds)
             * @param options - Request options (timeout, retries, headers)
             * @returns Promise resolving to ServiceResult with CTRNGResponse
             */
            random: (request, options) => this.ctrngService.random(request, options),
        };
    }
    /**
     * Authentication service
     *
     * @example
     * ```typescript
     * // Check if token is valid
     * const isValid = await sdk.auth.isTokenValid();
     *
     * // Get token information
     * const tokenInfo = await sdk.auth.getTokenInfo();
     *
     * // Clear stored token
     * await sdk.auth.clearToken();
     * ```
     */
    get auth() {
        return {
            /**
             * Checks if the current token is valid
             */
            isTokenValid: () => this.authService.isTokenValid(),
            /**
             * Gets token information without refreshing
             */
            getTokenInfo: () => this.authService.getTokenInfo(),
            /**
             * Clears the stored token
             */
            clearToken: () => this.authService.clearToken(),
            /**
             * Gets a valid access token (internal use)
             */
            getValidToken: () => this.authService.getValidToken(),
        };
    }
    /**
     * Updates the SDK configuration
     *
     * @param newConfig - Partial configuration to update
     *
     * @example
     * ```typescript
     * sdk.updateConfig({
     *   environment: 'staging',
     *   timeout: 60000,
     *   ipfs: {
     *     gateway: 'https://gateway.pinata.cloud',
     *     apiUrl: 'https://api.pinata.cloud'
     *   }
     * });
     * ```
     */
    updateConfig(newConfig) {
        const updatedConfig = (0, validation_1.sanitizeConfig)({ ...this.config, ...newConfig });
        this.config = updatedConfig;
        this.authService.updateConfig(updatedConfig);
        // Update IPFS configuration if provided
        if (newConfig.ipfs) {
            this.ctrngService.updateIPFSConfig(newConfig.ipfs);
            this.beaconService.updateConfig(newConfig.ipfs);
        }
        if (this.debug) {
            console.log("[OrbitportSDK] Configuration updated:", {
                ...updatedConfig,
                clientSecret: "[REDACTED]",
            });
        }
    }
    /**
     * Sets the event handler for SDK events
     *
     * @param handler - Event handler function
     *
     * @example
     * ```typescript
     * sdk.setEventHandler((event) => {
     *   console.log('SDK Event:', event);
     * });
     * ```
     */
    setEventHandler(handler) {
        this.authService.setEventHandler(handler);
    }
    /**
     * Sets debug mode
     *
     * @param debug - Whether to enable debug logging
     *
     * @example
     * ```typescript
     * sdk.setDebug(true);
     * ```
     */
    setDebug(debug) {
        this.debug = debug;
        this.authService.setDebug(debug);
    }
    /**
     * Gets the current configuration (with sensitive data redacted)
     *
     * @returns Current configuration object
     */
    getConfig() {
        return {
            ...this.config,
            clientId: "[REDACTED]",
            clientSecret: "[REDACTED]",
        };
    }
}
exports.OrbitportSDK = OrbitportSDK;
/**
 * Creates a new Orbitport SDK instance with default settings
 *
 * @param config - SDK configuration
 * @returns New OrbitportSDK instance
 *
 * @example
 * ```typescript
 * import { createOrbitportSDK } from '@spacecomputer/orbitport-sdk';
 *
 * const sdk = createOrbitportSDK({
 *   clientId: 'your-client-id',
 *   clientSecret: 'your-client-secret'
 * });
 * ```
 */
function createOrbitportSDK(config) {
    return new OrbitportSDK({ config });
}
exports.default = OrbitportSDK;
//# sourceMappingURL=index.js.map