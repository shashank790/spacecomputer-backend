/**
 * Error handling utilities for the Orbitport SDK
 */
import type { OrbitportError, APIError } from '../types';
/**
 * Custom error class for Orbitport SDK errors
 */
export declare class OrbitportSDKError extends Error implements OrbitportError {
    readonly code: ErrorCode;
    readonly status?: number;
    readonly details?: unknown;
    constructor(message: string, code: ErrorCode, status?: number, details?: unknown);
}
/**
 * Error codes used throughout the SDK
 */
export declare const ERROR_CODES: {
    readonly AUTH_FAILED: "AUTH_FAILED";
    readonly INVALID_CREDENTIALS: "INVALID_CREDENTIALS";
    readonly TOKEN_EXPIRED: "TOKEN_EXPIRED";
    readonly TOKEN_REFRESH_FAILED: "TOKEN_REFRESH_FAILED";
    readonly INVALID_CONFIG: "INVALID_CONFIG";
    readonly MISSING_CLIENT_ID: "MISSING_CLIENT_ID";
    readonly MISSING_CLIENT_SECRET: "MISSING_CLIENT_SECRET";
    readonly NETWORK_ERROR: "NETWORK_ERROR";
    readonly TIMEOUT: "TIMEOUT";
    readonly CONNECTION_FAILED: "CONNECTION_FAILED";
    readonly API_ERROR: "API_ERROR";
    readonly RATE_LIMITED: "RATE_LIMITED";
    readonly SERVICE_UNAVAILABLE: "SERVICE_UNAVAILABLE";
    readonly INVALID_RESPONSE: "INVALID_RESPONSE";
    readonly STORAGE_ERROR: "STORAGE_ERROR";
    readonly STORAGE_UNAVAILABLE: "STORAGE_UNAVAILABLE";
    readonly VALIDATION_ERROR: "VALIDATION_ERROR";
    readonly INVALID_PARAMETERS: "INVALID_PARAMETERS";
    readonly INVALID_REQUEST: "INVALID_REQUEST";
    readonly CTRNG_ERROR: "CTRNG_ERROR";
    readonly PROVIDER_UNAVAILABLE: "PROVIDER_UNAVAILABLE";
    readonly FALLBACK_FAILED: "FALLBACK_FAILED";
    readonly UNKNOWN_ERROR: "UNKNOWN_ERROR";
};
/**
 * Type for error code values
 */
export type ErrorCode = (typeof ERROR_CODES)[keyof typeof ERROR_CODES];
/**
 * Creates an OrbitportSDKError from an API error response
 */
export declare function createErrorFromAPIResponse(apiError: APIError, status?: number): OrbitportSDKError;
/**
 * Creates an OrbitportSDKError from a network error
 */
export declare function createNetworkError(error: Error, status?: number): OrbitportSDKError;
/**
 * Creates an OrbitportSDKError for configuration issues
 */
export declare function createConfigError(message: string, details?: unknown): OrbitportSDKError;
/**
 * Creates an OrbitportSDKError for validation issues
 */
export declare function createValidationError(message: string, details?: unknown): OrbitportSDKError;
/**
 * Determines if an error is retryable
 */
export declare function isRetryableError(error: OrbitportSDKError): boolean;
/**
 * Determines if an error is related to authentication
 */
export declare function isAuthError(error: OrbitportSDKError): boolean;
/**
 * Error message formatter for user-friendly error messages
 */
export declare function formatErrorMessage(error: OrbitportSDKError): string;
//# sourceMappingURL=errors.d.ts.map