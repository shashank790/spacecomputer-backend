/**
 * Authentication service for the Orbitport SDK
 */
import type { OrbitportConfig, TokenStorage, SDKEventHandler } from '../types';
/**
 * Authentication service class
 */
export declare class AuthService {
    private config;
    private storage;
    private eventHandler?;
    private debug;
    private tokenPromise;
    constructor(config: OrbitportConfig, storage: TokenStorage, eventHandler?: SDKEventHandler, debug?: boolean);
    /**
     * Gets a valid access token, refreshing if necessary
     */
    getValidToken(): Promise<string | null>;
    /**
     * Internal method to get valid token
     */
    private _getValidToken;
    /**
     * Requests a new access token from the authentication server
     */
    private requestNewToken;
    /**
     * Clears the stored token
     */
    clearToken(): Promise<void>;
    /**
     * Checks if the current token is valid
     */
    isTokenValid(): Promise<boolean>;
    /**
     * Gets token information without refreshing
     */
    getTokenInfo(): Promise<{
        valid: boolean;
        expiresAt?: number;
    }>;
    /**
     * Emits an SDK event
     */
    private emitEvent;
    /**
     * Updates the configuration
     */
    updateConfig(newConfig: Partial<OrbitportConfig>): void;
    /**
     * Updates the event handler
     */
    setEventHandler(handler: SDKEventHandler): void;
    /**
     * Sets debug mode
     */
    setDebug(debug: boolean): void;
}
//# sourceMappingURL=auth.d.ts.map