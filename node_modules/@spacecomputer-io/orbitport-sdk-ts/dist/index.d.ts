/**
 * Orbitport SDK - Official TypeScript SDK for SpaceComputer Orbitport
 *
 * @packageDocumentation
 */
export * from "./types";
export * from "./storage";
export * from "./utils/errors";
export * from "./utils/retry";
export * from "./utils/validation";
export { AuthService } from "./services/auth";
export { CTRNGService } from "./services/ctrng";
export { BeaconService } from "./services/ipfs";
import type { OrbitportConfig, SDKInitOptions, SDKEventHandler, CTRNGRequest, RequestOptions } from "./types";
/**
 * Main Orbitport SDK class
 *
 * @example
 * ```typescript
 * import { OrbitportSDK } from '@spacecomputer/orbitport-sdk';
 *
 * // With API credentials (tries API first, falls back to IPFS)
 * const sdk = new OrbitportSDK({
 *   config: {
 *     clientId: 'your-client-id',
 *     clientSecret: 'your-client-secret'
 *   }
 * });
 *
 * // Without API credentials (uses IPFS only)
 * const sdk = new OrbitportSDK({
 *   config: {}
 * });
 *
 * // Generate random data (always reads from both IPFS sources and compares)
 * const result = await sdk.ctrng.random();
 * console.log(result.data);
 * ```
 */
export declare class OrbitportSDK {
    private config;
    private authService;
    private ctrngService;
    private beaconService;
    private debug;
    /**
     * Creates a new Orbitport SDK instance
     *
     * @param options - SDK initialization options
     */
    constructor(options: SDKInitOptions);
    /**
     * cTRNG (cosmic True Random Number Generator) service
     *
     * @example
     * ```typescript
     * // Generate random data (API first if credentials provided, then IPFS fallback)
     * const result = await sdk.ctrng.random();
     *
     * // Generate random data with specific API source
     * const result = await sdk.ctrng.random({ src: 'rng' });
     *
     * // Generate random data from IPFS beacon only
     * const result = await sdk.ctrng.random({ src: 'ipfs' });
     *
     * // Generate random data from specific IPFS beacon
     * const result = await sdk.ctrng.random({
     *   src: 'ipfs',
     *   beaconPath: '/ipns/your-beacon-cid'
     * });
     *
     * // Generate random data from specific cTRNG value in beacon array
     * const result = await sdk.ctrng.random({
     *   src: 'ipfs',
     *   index: 2 // Select the 3rd value (0-based)
     * });
     *
     * // Generate random data from specific block with specific index
     * const result = await sdk.ctrng.random({
     *   src: 'ipfs',
     *   block: 10012, // Traverse to block 10012
     *   index: 1 // Select the 2nd value from that block
     * });
     * ```
     */
    get ctrng(): {
        /**
         * Generates true random numbers using cosmic sources
         *
         * Behavior:
         * - If API credentials provided: tries API first, falls back to IPFS
         * - If no API credentials: uses IPFS only
         * - IPFS always reads from both gateway and API sources and compares them
         * - Returns the selected cTRNG value from the beacon array (default: first value)
         *
         * @param request - Request parameters
         *   - src: "trng", "rng", or "ipfs" (source selection)
         *   - For IPFS requests (src: "ipfs"):
         *     - beaconPath: Custom IPFS beacon path
         *     - block: Block number to traverse to ("INF" for latest, default)
         *     - index: Index of cTRNG value to select from beacon array (0-based, uses modulo if out of bounds)
         * @param options - Request options (timeout, retries, headers)
         * @returns Promise resolving to ServiceResult with CTRNGResponse
         */
        random: (request?: Partial<CTRNGRequest>, options?: RequestOptions) => Promise<import("./types").ServiceResult<import("./types").CTRNGResponse>>;
    };
    /**
     * Authentication service
     *
     * @example
     * ```typescript
     * // Check if token is valid
     * const isValid = await sdk.auth.isTokenValid();
     *
     * // Get token information
     * const tokenInfo = await sdk.auth.getTokenInfo();
     *
     * // Clear stored token
     * await sdk.auth.clearToken();
     * ```
     */
    get auth(): {
        /**
         * Checks if the current token is valid
         */
        isTokenValid: () => Promise<boolean>;
        /**
         * Gets token information without refreshing
         */
        getTokenInfo: () => Promise<{
            valid: boolean;
            expiresAt?: number;
        }>;
        /**
         * Clears the stored token
         */
        clearToken: () => Promise<void>;
        /**
         * Gets a valid access token (internal use)
         */
        getValidToken: () => Promise<string | null>;
    };
    /**
     * Updates the SDK configuration
     *
     * @param newConfig - Partial configuration to update
     *
     * @example
     * ```typescript
     * sdk.updateConfig({
     *   environment: 'staging',
     *   timeout: 60000,
     *   ipfs: {
     *     gateway: 'https://gateway.pinata.cloud',
     *     apiUrl: 'https://api.pinata.cloud'
     *   }
     * });
     * ```
     */
    updateConfig(newConfig: Partial<OrbitportConfig>): void;
    /**
     * Sets the event handler for SDK events
     *
     * @param handler - Event handler function
     *
     * @example
     * ```typescript
     * sdk.setEventHandler((event) => {
     *   console.log('SDK Event:', event);
     * });
     * ```
     */
    setEventHandler(handler: SDKEventHandler): void;
    /**
     * Sets debug mode
     *
     * @param debug - Whether to enable debug logging
     *
     * @example
     * ```typescript
     * sdk.setDebug(true);
     * ```
     */
    setDebug(debug: boolean): void;
    /**
     * Gets the current configuration (with sensitive data redacted)
     *
     * @returns Current configuration object
     */
    getConfig(): Omit<OrbitportConfig, "clientSecret"> & {
        clientId: "[REDACTED]";
        clientSecret: "[REDACTED]";
    };
}
/**
 * Creates a new Orbitport SDK instance with default settings
 *
 * @param config - SDK configuration
 * @returns New OrbitportSDK instance
 *
 * @example
 * ```typescript
 * import { createOrbitportSDK } from '@spacecomputer/orbitport-sdk';
 *
 * const sdk = createOrbitportSDK({
 *   clientId: 'your-client-id',
 *   clientSecret: 'your-client-secret'
 * });
 * ```
 */
export declare function createOrbitportSDK(config: OrbitportConfig): OrbitportSDK;
export default OrbitportSDK;
//# sourceMappingURL=index.d.ts.map