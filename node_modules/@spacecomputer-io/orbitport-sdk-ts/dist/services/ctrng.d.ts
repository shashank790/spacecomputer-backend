/**
 * cTRNG (cosmic True Random Number Generator) service
 */
import type { CTRNGRequest, CTRNGResponse, ServiceResult, RequestOptions, OrbitportConfig } from '../types';
import { BeaconService } from './beacon';
/**
 * cTRNG service class
 */
export declare class CTRNGService {
    private config;
    private getToken;
    private debug;
    private beaconService;
    constructor(config: OrbitportConfig, getToken: () => Promise<string | null>, beaconService: BeaconService, debug?: boolean);
    /**
     * Generates true random numbers using cosmic sources
     * @param request - Request parameters (src: "trng", "rng", or "ipfs")
     * @param options - Request options (timeout, retries, headers)
     * @returns Promise resolving to ServiceResult with CTRNGResponse
     */
    random(request?: Partial<CTRNGRequest>, options?: RequestOptions): Promise<ServiceResult<CTRNGResponse>>;
    /**
     * Gets random data from API
     */
    private _getFromAPI;
    /**
     * Gets random data from IPFS beacon (always reads from both sources and compares)
     */
    private _getFromIPFSBeacon;
    /**
     * Validates the cTRNG response structure
     * @param data - Response data to validate
     */
    private _validateResponse;
    /**
     * Updates IPFS configuration
     * @param ipfsConfig - New IPFS configuration
     */
    updateIPFSConfig(ipfsConfig: any): void;
}
//# sourceMappingURL=ctrng.d.ts.map