/**
 * Token storage implementations for different environments
 */
import type { TokenStorage } from '../types';
/**
 * Browser localStorage implementation
 */
export declare class BrowserTokenStorage implements TokenStorage {
    private readonly key;
    constructor(key?: string);
    get(): Promise<string | null>;
    set(token: string, expiresAt: number): Promise<void>;
    clear(): Promise<void>;
}
/**
 * Node.js memory storage implementation
 */
export declare class MemoryTokenStorage implements TokenStorage {
    private token;
    private expiresAt;
    get(): Promise<string | null>;
    set(token: string, expiresAt: number): Promise<void>;
    clear(): Promise<void>;
}
/**
 * Node.js file system storage implementation
 */
export declare class FileTokenStorage implements TokenStorage {
    private readonly filePath;
    private readonly fs;
    constructor(filePath?: string);
    get(): Promise<string | null>;
    set(token: string, expiresAt: number): Promise<void>;
    clear(): Promise<void>;
}
/**
 * Custom storage implementation that allows user-defined storage
 */
export declare class CustomTokenStorage implements TokenStorage {
    private getter;
    private setter;
    private clearer;
    constructor(getter: () => Promise<string | null>, setter: (token: string, expiresAt: number) => Promise<void>, clearer: () => Promise<void>);
    get(): Promise<string | null>;
    set(token: string, expiresAt: number): Promise<void>;
    clear(): Promise<void>;
}
/**
 * Factory function to create appropriate storage based on environment
 */
export declare function createDefaultStorage(): TokenStorage;
/**
 * Creates a storage instance with specific configuration
 */
export declare function createStorage(options: {
    type: 'browser' | 'memory' | 'file' | 'custom';
    key?: string;
    filePath?: string;
    customStorage?: TokenStorage;
}): TokenStorage;
//# sourceMappingURL=index.d.ts.map